{"version":3,"sources":["Assets/images/magalu.jpg","Global/global.js","Pages/Home/styles.js","Components/Header/styles.js","Components/Header/index.js","Components/Search/styles.js","Components/Search/index.js","Components/Maps/styles.js","Components/Maps/index.js","Services/api.js","Pages/Home/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createGlobalStyle","Container","styled","div","AlignImageAndText","Image","TextName","text","Header","src","logo","alt","DivAddres","DivToSearch","LabelAddress","ButtonSearch","button","Search","value","method","onclick","onChange","mask","onClick","color","DivSearched","AddressRequested","DivMap","GoogleApiWrapper","apiKey","props","logradouro","bairro","localidade","cep","google","style","width","minWidth","height","display","justifyContent","alignContent","marginLeft","marginRight","zoom","initialCenter","lat","lng","center","title","name","position","api","axios","create","baseURL","callbackParamName","apiMap","Home","useState","setCep","address","setAddress","setError","lat_long","setLatLong","handleSubmitFind","e","a","toast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","get","dados","mapRequest","data","results","geometry","location","target","Routes","path","component","to","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1fb162d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/magalu.d8387be3.jpg\";","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n\n@import url('https://fonts.googleapis.com/css?family=Roboto&display=swap');\n\n*{\n  margin:0;\n  padding:0;\n  outline:0;\n  box-sizing:border-box;\n  font-family:Roboto;\n}\n\nbody{\n  background:#0086ff no-repeat center top;\n  -webkit-font-smoothing:antialiased;\n}\n\nbody,input, button {\n  font-size:14px Roboto, sans-serif;\n}\n\n#root{\n  width:100%;\n  margin:0 auto;\n\n}\n\nbutton{\n  cursor: pointer;\n}\n\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div``;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  background: #fff;\n  height: 80px;\n  width: 100%;\n`;\n\nexport const AlignImageAndText = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Image = styled.div`\n  img {\n    height: 85px;\n    width: 80px;\n  }\n`;\n\nexport const TextName = styled.text`\n  font-family: Roboto, -apple-system, sans-serif;\n  font-size: 35px;\n  color: #0086ff;\n  margin-left: 10px;\n`;\n","import React from 'react';\n\nimport { Container, AlignImageAndText, Image, TextName } from './styles';\nimport logo from '../../Assets/images/magalu.jpg';\n\nfunction Header() {\n  return (\n    <Container>\n      <AlignImageAndText>\n        <Image>\n          <img src={logo} alt=\"magalu\" />\n        </Image>\n        <TextName>Magalu Finder</TextName>\n      </AlignImageAndText>\n    </Container>\n  );\n}\n\nexport default Header;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nexport const DivAddres = styled.div`\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  margin-top: 15px;\n  margin-left: 10px;\n  margin-right: 10px;\n  background-color: #fff;\n  border-radius: 4px;\n  height: 120px;\n  padding: 5px;\n  flex-direction: column;\n`;\nexport const DivToSearch = styled.div`\n  margin-top: 20px;\n  flex-direction: column;\n\n  input {\n    border-radius: 4px;\n    height: 25px;\n    width: 240px;\n    background: #fff;\n    font-family: Roboto, -apple-system, sans-serif;\n  }\n`;\nexport const LabelAddress = styled.text`\n  font-size: 18px;\n  padding-right: 5px;\n  font-family: Roboto, -apple-system, sans-serif;\n`;\n\nexport const ButtonSearch = styled.button`\n  width: 50px;\n  margin-left: 5px;\n  height: 25px;\n  border: none;\n  border-radius: 4px;\n  background: #0086ff;\n`;\n","import React from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport MaskedInput from 'react-text-mask';\n\nimport {\n  Container,\n  DivAddres,\n  LabelAddress,\n  DivToSearch,\n  ButtonSearch,\n} from './styles';\n\nfunction Search({ value, method, onclick }) {\n  return (\n    <Container>\n      <DivAddres>\n        <LabelAddress>Pesquise seu endereço</LabelAddress>\n        <DivToSearch>\n          <LabelAddress>CEP:</LabelAddress>\n          <MaskedInput\n            value={value}\n            onChange={method}\n            mask={[/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]}\n          />\n          <ButtonSearch onClick={onclick}>\n            <FaSearch color={'#fff'} />\n          </ButtonSearch>\n        </DivToSearch>\n      </DivAddres>\n    </Container>\n  );\n}\n\nexport default Search;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nexport const DivSearched = styled.div`\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  flex-direction: column;\n  margin-top: 10px;\n  margin-left: 10px;\n  margin-right: 10px;\n  background: #f7f7f7;\n  max-width: 100%;\n  border-radius: 4px;\n  padding: 5px;\n`;\n\nexport const AddressRequested = styled.text`\n  font-family: Roboto, -apple-system, sans-serif;\n`;\n\nexport const DivMap = styled.div`\n  margin-top: 20px;\n`;\n","import React from 'react';\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport { Container, DivSearched, AddressRequested, DivMap } from './styles';\n\nfunction Maps(props) {\n  const style = {\n    width: '100%',\n    minWidth: '200px',\n    height: '500px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignContent: 'center',\n    marginLeft: '10px',\n    marginRight: '10px',\n  };\n\n  return (\n    <Container>\n      <DivSearched>\n        <AddressRequested>{props.logradouro}</AddressRequested>\n        <AddressRequested>{props.bairro}</AddressRequested>\n        <AddressRequested>{props.localidade}</AddressRequested>\n        <AddressRequested>{props.cep}</AddressRequested>\n      </DivSearched>\n      <DivMap>\n        <Map\n          google={props.google}\n          style={style}\n          zoom={15}\n          initialCenter={{ lat: props.lat, lng: props.lng }}\n          center={{ lat: props.lat, lng: props.lng }}\n        >\n          <Marker\n            title={'Minha localização'}\n            name={'location'}\n            position={{ lat: props.lat, lng: props.lng }}\n          />\n        </Map>\n      </DivMap>\n    </Container>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBY6-aoDfJd3xqkiZiMonZWHEkYJ3xaXh4',\n})(Maps);\n","import axios from 'axios';\n\nconst CEP = 'https://viacep.com.br/ws';\nconst MAPS = 'https://maps.googleapis.com/maps/api';\n\nexport const api = axios.create({\n  baseURL: CEP,\n  callbackParamName: 'address',\n});\n\nexport const apiMap = axios.create({\n  baseURL: MAPS,\n});\n","import React, { useState } from 'react';\n\nimport { Container } from './styles';\nimport Header from '../../Components/Header/index';\nimport Search from '../../Components/Search/index';\nimport Maps from '../../Components/Maps/index';\n\nimport { api, apiMap } from '../../Services/api';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction Home() {\n  const [cep, setCep] = useState('');\n  const [address, setAddress] = useState(null);\n  const [error, setError] = useState('');\n  const [lat_long, setLatLong] = useState(null);\n\n  const findCep = e => {\n    const { value } = e.target;\n    setCep(value);\n    setError('');\n  };\n\n  const handleSubmitFind = async e => {\n    if (!cep) {\n      toast('Favor digitar um CEP', {\n        position: 'bottom-right',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n      });\n    } else {\n      const dados = await api.get(`${cep}/json`);\n      const mapRequest = await apiMap.get(\n        `geocode/json?address=${cep}&key=AIzaSyBY6-aoDfJd3xqkiZiMonZWHEkYJ3xaXh4`\n      );\n\n      setAddress(dados.data);\n\n      setLatLong(mapRequest.data.results[0].geometry.location);\n\n      toast('Endereço encontrado', {\n        position: 'bottom-right',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n      });\n    }\n  };\n\n  const resetInputFind = () => {\n    setCep('');\n  };\n\n  return (\n    <Container>\n      <Header />\n      <Search value={cep} method={findCep} onclick={handleSubmitFind} />\n      {address ? (\n        <Maps {...address} {...lat_long} method={resetInputFind} />\n      ) : null}\n\n      <ToastContainer />\n    </Container>\n  );\n}\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport Home from './Pages/Home';\n// import Repository from './pages/Repository';/\n\nexport default function Routes() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","import React from 'react';\nimport GlobalStyle from './Global/global';\nimport Routes from './routes';\n\nfunction App() {\n  return (\n    <>\n      <Routes />\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}